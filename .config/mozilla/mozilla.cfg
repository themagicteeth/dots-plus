//
// Must be symlinked to the firefox installation root directry. 
// In my case:
// ln -s ~/.config/mozilla/mozilla.cfg ~/.local/opt/firefox/mozilla.cfg

// Startup
lockPref("browser.slowStartup.notificationDisabled", true);
lockPref("browser.slowStartup.maxSamples", 0);
lockPref("browser.slowStartup.samples", 0);
lockPref("browser.rights.3.shown", true);
lockPref("browser.startup.homepage_override.mstone", "ignore");
lockPref("startup.homepage_welcome_url", "");
lockPref("startup.homepage_welcome_url.additional", "");
lockPref("startup.homepage_override_url", "");
lockPref("browser.laterrun.enabled", false);
lockPref("browser.shell.checkDefaultBrowser", false);
lockPref("browser.startup.page", 3);
lockPref("browser.shell.didSkipDefaultBrowserCheckOnFirstRun", true);
lockPref("browser.aboutHomeSnippets.updateUrl", "https://127.0.0.1");

// Auto updates
defaultPref("app.update.staging.enabled", false);
defaultPref("app.update.auto", false);

// Extensions
defaultPref("xpinstall.signatures.required", false);
defaultPref("extensions.webextensions.keepStorageOnUninstall", false);
defaultPref("extensions.webextensions.keepUuidOnUninstall", false);
lockPref("extensions.update.enabled", false);
lockPref("extensions.update.autoUpdateDefault", false);
lockPref("extensions.getAddons.cache.enabled", false);
lockPref("lightweightThemes.update.enabled", false);
lockPref("extensions.webservice.discoverURL", "http://127.0.0.1");
lockPref("extensions.webextensions.remote", true);
lockPref("toolkit.telemetry.reportingpolicy.firstRun", false);

// Telemetry
lockPref("toolkit.telemetry.unified", false);
lockPref("toolkit.telemetry.enabled", false);
lockPref("toolkit.telemetry.server", "");
lockPref("toolkit.telemetry.archive.enabled", false);
lockPref("toolkit.telemetry.cachedClientID", "");
lockPref("toolkit.telemetry.newProfilePing.enabled", false);
lockPref("toolkit.telemetry.shutdownPingSender.enabled", false);
lockPref("toolkit.telemetry.updatePing.enabled", false);
lockPref("toolkit.telemetry.bhrPing.enabled", false);

// Health report
lockPref("datareporting.healthreport.uploadEnabled", false);
lockPref("datareporting.healthreport.about.reportUrl", "data:text/plain,");
lockPref("datareporting.policy.dataSubmissionEnabled", false);

// No self support
lockPref("browser.selfsupport.enabled", false);
lockPref("browser.selfsupport.url", "");

// Crash reports
lockPref("breakpad.reportURL", "");
lockPref("browser.tabs.crashReporting.sendReport", false);
lockPref("browser.crashReports.unsubmittedCheck.enabled", false);
lockPref("browser.crashReports.unsubmittedCheck.autoSubmit", false);
lockPref("browser.crashReports.unsubmittedCheck.chancesUntilSuppress", 0);
lockPref("dom.ipc.plugins.reportCrashURL", false);
lockPref("dom.ipc.plugins.flash.subprocess.crashreporter.enabled", false);

// No SSL error reports
lockPref("security.ssl.errorReporting.automatic", false);
lockPref("security.ssl.errorReporting.enabled", false);
lockPref("security.ssl.errorReporting.url", "");

// Flyweb
lockPref("dom.flyweb.enabled", false);

// Pocket
lockPref("extensions.pocket.enabled", false);
lockPref("extensions.pocket.api", "");
lockPref("extensions.pocket.oAuthConsumerKey", "");
lockPref("extensions.pocket.site", "");

// Social
lockPref("social.whitelist", "");
lockPref("social.toast-notifications.enabled", false);
lockPref("social.shareDirectory", "");
lockPref("social.remote-install.enabled", false);
lockPref("social.directories", "");
lockPref("social.share.activationPanelEnabled", false);
lockPref("social.enabled", false);

// Warnings
defaultPref("general.warnOnAboutConfig", false);
defaultPref("browser.tabs.warnOnClose", false);
defaultPref("browser.tabs.warnOnCloseOtherTabs", false);
defaultPref("browser.tabs.warnOnOpen", false);

// Sheild studies
lockPref("extensions.shield-recipe-client.enabled", false);
lockPref("extensions.shield-recipe-client.api_url", "");
lockPref("extensions.shield-recipe-client.first_run", false);

// Onboarding
lockPref("browser.onboarding.enabled", false);
lockPref("browser.onboarding.hidden", true);
lockPref("browser.onboarding.notification.finished", true);

// Notify of offline apps
lockPref("offline-apps.allow_by_default", false);
lockPref("browser.offline-apps.notify", true);

// Web compatibility reporter
lockPref("extensions.webcompat-reporter.enabled", false);

// Safe browsing
lockPref("browser.safebrowsing.malware.enabled", false);
lockPref("browser.safebrowsing.phishing.enabled", false);
lockPref("browser.safebrowsing.downloads.enabled", false);
lockPref("browser.safebrowsing.downloads.remote.block_potentially_unwanted", false);
lockPref("browser.safebrowsing.downloads.remote.block_uncommon", false);
lockPref("browser.safebrowsing.downloads.remote.block_dangerous", false);
lockPref("browser.safebrowsing.downloads.remote.block_dangerous_host", false);
lockPref("browser.safebrowsing.downloads.remote.enabled", false);
lockPref("browser.safebrowsing.blockedURIs.enabled", false);
lockPref("browser.safebrowsing.allowOverride", false);

// Safe browsing URLs
lockPref("browser.safebrowsing.provider.google.updateURL", "");
lockPref("browser.safebrowsing.provider.google.gethashURL", "");
lockPref("browser.safebrowsing.provider.google4.updateURL", "");
lockPref("browser.safebrowsing.provider.google4.gethashURL", "");
lockPref("browser.safebrowsing.downloads.remote.url", "");
lockPref("browser.safebrowsing.provider.google.reportURL", "");
lockPref("browser.safebrowsing.reportPhishURL", "");
lockPref("browser.safebrowsing.provider.google4.reportURL", "");
lockPref("browser.safebrowsing.provider.google.reportMalwareMistakeURL", "");
lockPref("browser.safebrowsing.provider.google.reportPhishMistakeURL", "");
lockPref("browser.safebrowsing.provider.google4.reportMalwareMistakeURL", "");
lockPref("browser.safebrowsing.provider.google4.reportPhishMistakeURL", "");
lockPref("browser.safebrowsing.provider.mozilla.gethashURL", "");
lockPref("browser.safebrowsing.provider.mozilla.updateURL", "");

// Tracking protection
lockPref("privacy.trackingprotection.pbmode.enabled", false); 
lockPref("privacy.trackingprotection.enabled", false); 
lockPref("privacy.trackingprotection.ui.enabled", false);
lockPref("privacy.trackingprotection.annotate_channels", false);
lockPref("privacy.trackingprotection.lower_network_priority", false);
lockPref("privacy.donottrackheader.enabled", false);
lockPref("privacy.trackingprotection.annotate_channels", false);
lockPref("privacy.trackingprotection.lower_network_priority", false);

// Experiments
lockPref("experiments.enabled", false);
lockPref("experiments.manifest.uri", "");
lockPref("experiments.supported", false);
lockPref("experiments.activeExperiment", false);
lockPref("network.allow-experiments", false);
lockPref("browser.cache.frecency_experiment", -1);

// Microsoft family safety cert
lockPref("security.family_safety.mode", 0);

// Bookmarks
lockPref("browser.bookmarks.max_backups", 2);
defaultPref("browser.bookmarks.showRecentlyBookmarked", false);
defaultPref("browser.tabs.loadBookmarksInTabs", true);
lockPref("browser.places.smartBookmarkVersion", -1);

// Pings
lockPref("browser.send_pings", false);
lockPref("browser.send_pings.require_same_host", true);

// URL bar
lockPref("security.ssl.treat_unsafe_negotiation_as_broken", true);
lockPref("network.IDN_show_punycode", true);
lockPref("browser.urlbar.suggest.searches", false);
lockPref("browser.urlbar.userMadeSearchSuggestionsChoice", true);
lockPref("browser.urlbar.trimURLs", false);
defaultPref("browser.urlbar.clickSelectsAll", true);
defaultPref("browser.urlbar.doubleClickSelectsAll", false);
lockPref("browser.urlbar.usepreloadedtopurls.enabled", false);

// Containers
lockPref("privacy.userContext.ui.enabled", true);
lockPref("privacy.userContext.enabled", true);
lockPref("privacy.usercontext.about_newtab_segregation.enabled", true);

// Do not track
lockPref("privacy.donottrackheader.enabled", false);
lockPref("privacy.trackingprotection.pbmode.enabled", false);
lockPref("privacy.trackingprotection.enabled", false);
lockPref("privacy.trackingprotection.ui.enabled", false);

// Tabs
defaultPref("browser.tabs.insertRelatedAfterCurrent", true);
defaultPref("browser.tabs.selectOwnerOnClose", true);
defaultPref("browser.tabs.loadInBackground", true);
defaultPref("browser.tabs.loadDivertedInBackground", true);
defaultPref("browser.tabs.warnOnClose", false);
defaultPref("browser.tabs.warnOnCloseOtherTabs", false);
defaultPref("browser.tabs.warnOnOpen", false);
defaultPref("browser.tabs.closeWindowWithLastTab", false);
defaultPref("browser.ctrlTab.previews", true);
defaultPref("browser.sessionhistory.max_entries", 10);

// Beacon
lockPref("beacon.enabled", false);

// Cookies
lockPref("network.cookie.leave-secure-alone", true);
lockPref("network.cookie.thirdparty.sessionOnly", true);

// Reader mode
defaultPref("reader.parse-on-load.enabled", false);

// Updates
lockPref("extensions.getAddons.cache.enabled", false);
lockPref("extensions.update.enabled", false);
lockPref("extensions.update.autoUpdateDefault", false);
lockPref("lightweightThemes.update.enabled", false);
lockPref("extensions.systemAddon.update.url", "");
lockPref("browser.search.update", false);

// UI Tour
lockPref("browser.uitour.enabled", false);
lockPref("browser.uitour.url", "");

// New findbar
defaultPref("findbar.highlightAll", true);
defaultPref("findbar.modalHighlight", true);

// Activity stream
lockPref("browser.newtabpage.activity-stream.feeds.section.topstories", false);
lockPref("browser.newtabpage.activity-stream.telemetry", false);
lockPref("browser.newtabpage.activity-stream.feeds.section.topstories.options", "");
lockPref("browser.newtabpage.introShown", true);
lockPref("browser.newtabpage.activity-stream.feeds.telemetry", false);
lockPref("browser.newtabpage.activity-stream.telemetry.ping.endpoint", "");
lockPref("browser.newtabpage.activity-stream.default.sites", "");
lockPref("browser.newtabpage.activity-stream.feeds.migration", false);
lockPref("browser.newtabpage.activity-stream.migrationExpired", true);
lockPref("browser.newtabpage.enhanced",false);
lockPref("browser.newtabpage.directory.ping", "");
lockPref("browser.newtabpage.directory.source", "data:application/json,{}");
lockPref("browser.newtabpage.activity-stream.feeds.snippets", false);
defaultPref("browser.newtabpage.activity-stream.aboutHome.enabled", true);

// Smooth scroll
defaultPref("general.smoothScroll.currentVelocityWeighting", "0");
defaultPref("general.smoothScroll.mouseWheel.durationMaxMS", 250);
defaultPref("general.smoothScroll.stopDecelerationWeighting", "0.82");
defaultPref("mousewheel.min_line_scroll_amount", 25);

// Search
lockPref("browser.search.suggest.enabled", false);
defaultPref("browser.search.openintab", true);

//Form autofill
lockPref("extensions.formautofill.creditCards.enabled", false);

// Windows taskbar
lockPref("browser.taskbar.lists.enabled", false);
lockPref("browser.taskbar.lists.frequent.enabled", false);
lockPref("browser.taskbar.lists.recent.enabled", false);
lockPref("browser.taskbar.lists.tasks.enabled", false);
lockPref("browser.taskbar.previews.enable", false);

// Session
lockPref("browser.sessionstore.interval", 30000);
lockPref("security.ssl.disable_session_identifiers", true);

// Ping centre
lockPref("browser.ping-centre.production.endpoint", "");
lockPref("browser.ping-centre.staging.endpoint", "");
lockPref("browser.ping-centre.telemetry", false);

// Cache
lockPref("browser.cache.disk.enable", false);
lockPref("browser.cache.disk.capacity", 0);
lockPref("browser.cache.disk_cache_ssl", false);
lockPref("browser.cache.offline.enable", false);
lockPref("browser.cache.offline.capacity", 0);
lockPref("browser.cache.disk.smart_size.enabled", false);

// Tooltips
defaultPref("browser.chrome.toolbar_tips", false);

// Mixed display content
pref("security.mixed_content.block_display_content", true);

// Accessibility
pref("accessibility.force_disabled", 1);

// Search
defaultPref("browser.search.defaultenginename", "Google");
defaultPref("browser.search.order.1", "Google");

// Plugins
lockPref("plugin.default.state", 0);
lockPref("plugin.scan.plid.all", false);
pref("security.xpconnect.plugin.unrestricted", false);

// Isolate cookies
pref("privacy.firstparty.isolate", true);
pref("privacy.firstparty.isolate.restrict_opener_access", true);

// Devtools
defaultPref("devtools.theme", "dark");
lockPref("devtools.webide.autoinstallADBHelper", false);
lockPref("devtools.webide.autoinstallFxdtAdapters", false);

const {classes: Cc, interfaces: Ci, utils: Cu} = Components;
Cu.import("resource://gre/modules/Services.jsm");
Cu.import("resource://gre/modules/FileUtils.jsm");
 
var profileDir = Services.dirsvc.get("ProfD", Ci.nsIFile);
var certDBFile = profileDir.clone();
certDBFile.append("cert8.db")
// If cert8.db isn't there, it's a new profile
if (!certDBFile.exists()) {
  var defaultProfileDir = Services.dirsvc.get("GreD", Ci.nsIFile);
  defaultProfileDir.append("defaults");
  defaultProfileDir.append("profile");
  try {
    copyDir(defaultProfileDir, profileDir);
  } catch (e) {
    Components.utils.reportError(e);
  }
}
  
function copyDir(aOriginal, aDestination) {
  var enumerator = aOriginal.directoryEntries;
  while (enumerator.hasMoreElements()) {
    var file = enumerator.getNext().QueryInterface(Components.interfaces.nsIFile);
    if (file.isDirectory()) {
      var subdir = aDestination.clone();
      subdir.append(file.leafName);
      try {
        subdir.create(Ci.nsIFile.DIRECTORY_TYPE, FileUtils.PERMS_DIRECTORY);
        copyDir(file, subdir);
      } catch (e) {
        Components.utils.reportError(e);
      }
    } else {
      try {
        file.copyTo(aDestination, null);
      } catch (e) {
        Components.utils.reportError(e);
      }
    }
  }
}
